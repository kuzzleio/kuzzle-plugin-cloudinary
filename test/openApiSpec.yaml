openapi: 3.0.1
info:
  title: 'Kuzzle plugin : Cloudinary'
  description: "This is an usage example of Kuzzle plugin 'Cloudinary'. You can find more about this plugin 
    on [GitHub](https://github.com/kuzzleio/kuzzle-plugin-cloudinary). If you need help, you can reach us on [Gitter](https://gitter.im/kuzzleio/kuzzle)"
  contact:
    email: support@kuzzle.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Cloudinary-plugin repository 
  url: https://github.com/kuzzleio/kuzzle-plugin-cloudinary
servers:
- url: http://localhost:7512/_plugin/cloudinary
tags:
- name: assets
  description: Everything about your Cloudinary assets
- name: tags
  description: Manage the tags of your Cloudinary assets
- name: openApi
  description: Only used to return OpenAPI specification
paths:
  ## Assets controller
  /assets/search: 
    post:
      tags:
      - assets
      summary: Search for assets corresponging to an expression
      description: Be aware that you should either put `expression` or `next_cursor` field. **If both are set, expression will be ignored**
      operationId: searchAssets
      requestBody:
        content: 
          application/json: 
            schema: 
              type: object
              required: 
                - expression
                - next_cursor
              properties: 
                expression: 
                  type: string
                  example: "cat AND resource-type:image"
                next_cursor: 
                  type: string
                max_results: 
                  type: integer
                  default: 50
                  example: 20
                with_field:
                  type: array
                  items: 
                    type: string
                    example: 
                      "tags"
                sort_by:
                  type: array
                  items: 
                    type: string
                    example: [ "public_id","asc" ]
      responses:
        200:
          description: successful operation
          
  /assets/transform:
    post:
      tags:
      - assets
      summary: Return an url of a transformed assets
      description: You can transform your assets with on-the-fly transformations.
      externalDocs: 
        url: https://cloudinary.com/documentation/image_transformation_reference
        description: More information about transformation request body object
      operationId: assetsTransformation
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required: 
                - public_id
                - transformation
              properties: 
                public_id: 
                  type: string
                transformation: 
                  type: object 
            example: 
              public_id: "sample"
              transformation:
                width: 400
                radius: 0:100:100:100
      responses:
        200:
          description: successful operation
          content:
            text/plain:
              schema:
                type: string
                example: "https://res.cloudinary.com/demo/image/upload/w_400,r_0:100:100:100/sample.jpg"
              
        400:
          description: Bad Request error if one attributes is missing
          content: {}
          
  /assets/{public_id}: 
    put: 
      tags:
      - assets
      summary: Rename an asset
      operationId: renameAsset
      parameters: 
        - in: path
          name: public_id
          required: true
          schema: 
            type: string
          description: The old public_id of the asset
          example: "old_name"
        - in : query 
          name: new_public_id
          required: true
          schema: 
            type: string
          description: The new public_id of the asset
          example: "new_name"
      
      responses:
        200:
          description: Returns all information about renamed asset
          content: {}
        400:
          description: Bad Request error if one attributes is missing
          content: {}
        404:
          description: Asset not found
          content: {}
    delete: 
      tags:
      - assets
      summary: Delete an asset
      operationId: destroyAsset
      parameters: 
        - in: path
          name: public_id
          required: true
          schema: 
            type: string
          description: The public_id of the asset
          example: "old_name"
      responses:
        200:
          description: OK
          content: {}
        400:
          description: Bad Request error if one attributes is missing
          content: {}
        404:
          description: Asset not found
          content: {}
            
  ##Tags controller
  /tags:
    post:
      tags:
      - tags
      summary: Add new tag to one or several assets
      description: You can provide several assets in an array of string in the Request Body 
      operationId: addTags
      requestBody:
        description: public_id can be a `String` or an `Array of String`
        required: true
        content: 
          application/json: 
            schema:
              type: object
              required: 
                - public_id
                - tag
              properties: 
                public_id: 
                  oneOf: 
                    - type: array
                      items: 
                        type: string
                    - type: string 
                tag: 
                  type: string
            example: 
              public_id: "sample"
              tag: "a tag"
            
      responses:
        200:
          description: OK (returns all updated public_id)
          content:
            application/json:
              schema:
                type: array 
                items:
                  type: string
                  example: "sample"
        206:
          description: If you entered several public_id, a 206 error might be thrown if one or several assets haven't been updated.
          content: 
            application/json:
              schema: 
                $ref : '#/components/schemas/PartialError'
  /tags/{tag}:
    put: 
      tags:
      - tags
      summary: Replace all the tag from one or several assets with another tag
      description: You can provide several assets by entering `public_id` parameters several times 
      operationId: replaceTags
      parameters:
        - in: path
          name: tag
          required: true
          schema: 
            type: string
          description: The tag that will replace all present tag
          example: "a_tag"
        - in: query
          name: public_id
          style: form
          explode: true
          required: true
          schema: 
            type: string 
          description: The public_id of assets to be edited (This parameter can be input several times)
          example: "sample"
      responses:
        200:
          description: OK (returns all updated public_id)
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                  example: "sample"
        206:
          description: If you entered several public_id, a 206 error might be thrown if one or several assets haven't been updated.
          content: 
            application/json:
              schema: 
                $ref : '#/components/schemas/PartialError'
    delete: 
      tags:
      - tags
      summary: Delete the tag from one or several assets
      description: You can provide several assets by entering `public_id` parameters several times 
      operationId: removeTag
      parameters:
        - in: path
          name: tag
          required: true
          schema: 
            type: string
          description: The tag that will be deleted from the asset(s)
          example: "the tag is a lie"
        - in: query
          name: public_id
          style: form
          explode: true
          required: true
          schema: 
            type: string 
          description: The public_id of assets to be edited (This parameter can be input several times)
          example: "sample"
      responses:
        200:
          description: OK (returns all updated public_id)
          content:
            application/json:
              schema:
                type: string
                example: "sample"
        206:
          description: If you entered several public_id, a 206 error might be thrown if one or several assets haven't been updated.
          content: 
            application/json:
              schema: 
                $ref : '#/components/schemas/PartialError'
                
  /tags/remove_all:
    delete: 
      tags:
      - tags
      summary: Delete all the tags from one or several assets
      description: You can provide several assets by entering `public_id` parameters several times 
      operationId: removeAllTags
      parameters:
        - in: query
          name: public_id
          style: form
          explode: true
          required: true
          schema: 
            type: string 
          description: The public_id of assets to be edited (This parameter can be input several times)
          example: "sample"
      responses:
        200:
          description: OK (returns all updated public_id)
          content:
            application/json:
              schema:
                type: string
                example: "sample"
        206:
          description: If you entered several public_id, a 206 error might be thrown if one or several assets haven't been updated.
          content: 
            application/json:
              schema: 
                $ref : '#/components/schemas/PartialError'      
  /openApi:
    get:
      tags:
      - openApi
      summary: Returns the Open API Specification
      operationId: getSpecification
      responses:
        200:
          description: OpenAPI Specification as json
          content: {}
components:
  schemas:
    PartialError: 
      type: array
      items: 
        type: object
        properties: 
          message:
            type: string
          public_id: 
            type: string